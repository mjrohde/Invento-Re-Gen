<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="eOC8nsZXJtc1" viewBox="0 0 640 480" shape-rendering="geometricPrecision" text-rendering="geometricPrecision"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><g><text dx="0" dy="0" font-family="&quot;eOC8nsZXJtc1:::Oswald&quot;" font-size="70" font-weight="500" transform="translate(204.570938 271.7411)" fill="#001e3a" stroke-width="0"><tspan y="0" font-weight="500" stroke-width="0"><![CDATA[INVENTO]]></tspan></text></g><style><![CDATA[@font-face {font-family: 'eOC8nsZXJtc1:::Oswald';font-style: normal;font-weight: 500;src: url(data:font/ttf;charset=utf-8;base64,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) format('truetype');}]]></style></svg>